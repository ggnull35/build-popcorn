#!/bin/bash

#Written by MrVaykadji - http://github.com/MrVaykadji
#Thanks to Andrew for func_apt, nodejs PPA and libudev fix - http://webupd8.org
#licensed under GPLv3
#for Ubuntu 12.04 and newer

installdir="/opt"
nodeversion="0.9.2"
version="master"
OfficialURL="http://popcorntime.io"
gitURL="https://git.popcorntime.io/stash/scm/pt/popcorn-app.git"
issueURL="https://git.popcorntime.io/jira"
icon="http://i.imgur.com/BhQu7He.png"
log="$HOME/popcorn-build.log"
buildscriptURL="https://raw.githubusercontent.com/MrVaykadji/build-popcorn/master/"
buildscript="build-popcorn"
[ $(arch) == "x86_64" ] && arch=64 || arch=32
buildtime="`date +%Y.%m.%d-%Hh%M`"

#FUNCTIONS
func_apt() {
for lock in synaptic update-manager software-center apt-get "dpkg " aptitude
do
 if ps -U root -u root u | grep "$lock" | grep -v grep > /dev/null; then 
  echo "
Unexpected Error:
=================
Please close $lock then try again.";
  exit 1
 fi
done 
}

func_root() {
[ "$EUID" == "0" ] && 
echo "Error. You need to run this without 'root' or 'sudo' privileges." && 
exit 2
}

func_error() {
[ -n $error ] && return 0
echo "
Unexpected Error:
================="
cat $log
echo "
Please try again."
exit 1 
}

func_clean() {
case $1 in 
	-save)
		sudo mkdir -p /tmp/popcorn-config
		sudo cp -r $HOME/.config/Popcorn-Time/data /tmp/popcorn-config/ &> /dev/null
		sudo rm -rf $HOME/.config/Popcorn-Time/*
		sudo cp -r /tmp/popcorn-config/data $HOME/.config/Popcorn-Time/ &> /dev/null && 
		sudo chown -Rf $USER:$USER $HOME/.config/Popcorn-Time/data && 
		sudo chmod -R 774 $HOME/.config/Popcorn-Time/data
		;;
	-all)
		sudo rm -rf $installdir/Popcorn-Time /usr/share/pixmaps/popcorntime.png /usr/bin/popcorn-time $HOME/tmp $HOME/popcorn-app $HOME/npm-debug.log $HOME/.npm $HOME/.cache/bower $HOME/.config/configstore/insight-bower.yml $HOME/.config/configstore/update-notifier-bower.yml $HOME/.local/share/bower $log $HOME/$version.zip $HOME/.npm/
		;;
	-package)
		sudo apt-get purge nodejs -y &> /dev/null && 
		sudo apt-get autoremove -y &> /dev/null && 
		sudo rm -rf /usr/bin/node && 
		sudo add-apt-repository -yr ppa:chris-lea/node.js &> /dev/null && 
		echo -e "... Done.\n" 
		;;
	-building)
        sudo rm -rf $HOME/tmp $HOME/popcorn-app $HOME/npm-debug.log $HOME/.npm $HOME/.cache/bower $HOME/.config/configstore/insight-bower.yml $HOME/.config/configstore/update-notifier-bower.yml $HOME/.local/share/bower $log $HOME/.npm && 
		echo -e "... Done.\n"
		;;
esac
}

func_ptexists() {
if [ "$1" == "-update" ] ; then
	func_clean -save
else
	[ -e "$installdir/Popcorn-Time" ] && 
	read -p "
WARNING: Popcorn-Time is already installed in '$installdir' and will be erased. Do you want to keep the configuration files (bookmarks, watched list, settings, ...) [y/n] ? "
	if [ "$REPLY" == "y" ] ; then
		func_clean -save
	else	
		sudo rm -rf $HOME/.config/Popcorn-Time/
	fi
	sudo rm -rf /usr/share/applications/popcorn-time.desktop
fi
func_clean -all
}

func_dependencies() {
#package dep
[[ -n `egrep -v '^#|^ *$' /etc/apt/sources.list /etc/apt/sources.list.d/* | grep chris-lea/node.js` ]] && nodeppa=1 || nodeppa=0
if [ -n "`dpkg-query -W -f='${Status}\n' nodejs wget unzip git | grep not`" ] || [ $nodeppa == "0" ] ; then
	echo "- Checking for dependencies 'nodejs', 'wget' and 'unzip'..."
	sudo apt-add-repository -y ppa:chris-lea/node.js &> $log && 
	sudo apt-get update &> $log

	sudo apt-get install nodejs wget git unzip -y &> $log && echo -e "  ...Ok !" || error=1
	func_error
fi

#npm dep
if [ -e "/usr/lib/node_modules/bower" ] && [ -e "/usr/lib/node_modules/grunt-cli" ] ; then
	echo -e "\n- Updating NPM 'grunt-cli' and 'bower'..."
else
	echo -e "\n- Installing NPM 'grunt-cli' and 'bower'..."
fi
sudo npm install -g grunt-cli bower &> $log && echo -e "  ...Ok !\n" || error=1
func_error

#repair broken nodejs symlink
[ ! -e /usr/bin/node ] && sudo ln -s /usr/bin/nodejs /usr/bin/node

#symlink libudev.so on 12.04 and 12.10
[[ `lsb_release -sr` =~ "12.04"|"12.10" ]] && [ ! -e /lib/$(arch)-linux-gnu/libudev.so.1 ] && sudo ln -s /lib/$(arch)-linux-gnu/libudev.so.0 /lib/$(arch)-linux-gnu/libudev.so.1
}

func_build() {
#get sources
echo "- Downloading sources (branch:$version) from GitHub..."
cd
[ -e popcorn-app ] && rm -rf popcorn-app
git clone $gitURL &> $log && cd popcorn-app && echo -e "  ...Ok !\n" || error=1
func_error

#npm
echo "- Running 'npm install'..."
sudo chown -Rf $USER:$USER $HOME/tmp $HOME/.npm
npm install --yes &> $log && echo -e "  ...Ok !\n" || error=1
func_error

#build
if [ "$1" == "-update" ] ; then
 buildcommand="linux$arch"
else
 buildvar=0
 echo -e "You can build for this machine only (linux$arch) or for all platforms, including : Mac, Windows, Linux 32-bits, Linux 64-bits.\n\nFor what platforms do you wish to build (for multiple builds, separate each platform with a comma)"
 read -p "[mac/win/linux32/linux64/all] : " input
 IFS=',' read -a options <<< "$input"
 shopt -s extglob
 for option in "${options[@]}"; do
    case "$option" in
        win|mac|linux32|linux64|all)
            buildcommand="${buildcommand:+$buildcommand,}$option"
            buildvar=1;;
        *)
            printf 'Invalid option "%s" ignored.\n' "$option";;
    esac
 done
 if (( !buildvar )); then
    echo "Incorrect input. Default build 'linux$arch' selected."
    buildcommand="linux$arch"
 fi
 [[ -n "`echo $buildcommand | grep all`" ]] && buildcommand="all"
fi

echo -e "\n- Building with 'grunt'... This may take a few minutes"
grunt build --platforms=$buildcommand && echo -e "   ...Ok !\n" || error=1
func_error

echo -e "Popcorn-Time has been built in :\n  «$HOME/popcorn-app/build/releases/Popcorn-Time/»\n" 
}

func_install() {
[ "`echo $buildcommand | grep -v linux$arch`" ] && exit 0

if [ "$1" != "-update" ] ; then
	read -p "Do you wish to install Popcorn-Time on this computer [y/n] ? " input
	if [[ "${input}" != "y" ]] ; then 
		exit 0
	fi
fi

#clean .npm, dunno why that bugs
sudo rm -rf $HOME/.npm

sudo mkdir -p "$installdir" "$installdir"/Popcorn-Time "$installdir"/Popcorn-Time/src/app "$installdir"/Popcorn-Time/node-webkit
#copy node
sudo cp build/cache/linux$arch/$nodeversion/libffmpegsumo.so "$installdir"/Popcorn-Time/node-webkit
sudo cp build/cache/linux$arch/$nodeversion/nw "$installdir"/Popcorn-Time/node-webkit
sudo cp build/cache/linux$arch/$nodeversion/nw.pak "$installdir"/Popcorn-Time/node-webkit
#copy node_modules
sudo rsync -a --exclude='*grunt*' --exclude='stylus' --exclude='bower' --exclude='bin' --exclude='test*' --exclude='example*' --exclude='doc*' --exclude='demo*' --exclude='.*' node_modules "$installdir"/Popcorn-Time
#copy source
sudo cp -r src/app/css "$installdir"/Popcorn-Time/src/app
sudo cp -r src/app/fonts "$installdir"/Popcorn-Time/src/app
sudo cp -r src/app/images "$installdir"/Popcorn-Time/src/app
sudo cp -r src/app/language "$installdir"/Popcorn-Time/src/app
sudo cp -r src/app/lib "$installdir"/Popcorn-Time/src/app
sudo cp -r src/app/themes "$installdir"/Popcorn-Time/src/app/themes
sudo cp -r src/app/templates "$installdir"/Popcorn-Time/src/app
sudo cp -r src/app/vendor "$installdir"/Popcorn-Time/src/app
sudo cp src/app/index.html "$installdir"/Popcorn-Time/src/app
sudo cp src/app/*.js "$installdir"/Popcorn-Time/src/app
sudo cp package.json "$installdir"/Popcorn-Time
sudo cp src/app/images/icon.png "$installdir"/Popcorn-Time

echo -e "\n- Creating commandline launcher..."
echo "#!/bin/bash
echo \"Popcorn Time
============\"

[ \"\$EUID\" == \"0\" ] && echo \"Error: You need to run this without 'root' or 'sudo' privileges.\" && exit 2

helpsection() {
echo \"Version : custombuild '$version' 
Built on $buildtime from $gitURL
Official website : $OfficialURL

Options:
  -h, --help		Display this help.
  -q,--quiet		Launch Popcorn-Time without output.
  --flush		Flush databases.
  --fix-node		Fix the node-webkit 'blank' error.
  --uninstall		Uninstall Popcorn-Time.
  --issue		Report an issue.
  --build		Build latest version from sources.\"
}

flush_all() {
echo \"- Flushing databases...\"
sudo rm -rf $HOME/.config/Popcorn-Time
}

uninstall() {
echo \"- Uninstalling Popcorn-Time and removing configuration files...\"
sudo bash $installdir/Popcorn-Time/uninstall.sh
}

popcorntimequiet() {
echo \"Starting...\"
nohup $installdir/Popcorn-Time/node-webkit/nw $installdir/Popcorn-Time &> /dev/null &
exit 0
}

popcorntime() {
$installdir/Popcorn-Time/node-webkit/nw $installdir/Popcorn-Time
}

reportissue() {
echo \"Here is what a great bug report looks like:


###############################
Describe the problem here

Version: $version for Linux $arch bits
         Built on $buildtime
Downloaded from: $gitURL
OS: `lsb_release -si` `lsb_release -sr` `arch`
Connection: X mbps

How to reproduce:
 - Step 1
 - Step 2
 - Step 3
Actual result:
 - X goes wrong
Expected result:
 - X should go like that
###############################\"
xdg-open $issueURL &> /dev/null
}

fix_node() {
echo \"Fixing node-webkit...\"
rm -rf $HOME/.config/node-webkit
rm -rf $HOME/.npm
}

build_pt() {
cd
echo \"Building script fetched from GitHub...\"
wget -q $buildscriptURL$buildscript -O /tmp/$buildscript
bash /tmp/$buildscript -update
}

case \$1 in
	-h|--help)
		helpsection
		;;
	--uninstall)
		uninstall
		;;
	--flush)
		flush_all
		;;
	--fix-node)
		fix_node
		;;
	--issue)
		reportissue
		;;
	-q|--quiet)
		popcorntimequiet
		;;
	--build)
		build_pt
		;;
	*)
		popcorntime
		;;
esac" | sudo tee /usr/bin/popcorn-time &> /dev/null
sudo chmod +x /usr/bin/popcorn-time
echo -e "    «/usr/bin/popcorn-time»\n"

echo "- Creating launcher... "
echo "[Desktop Entry]
Comment=Watch movies in streaming with P2P.
Comment[fr]=Regarder des films en streaming.
Name=Popcorn Time
Exec=/usr/bin/popcorn-time
StartupNotify=false
Type=Application
Icon=$installdir/Popcorn-Time/icon.png
Actions=ForceClose;ReportIssue;FlushDB;FixNode;BuildUpdate;
Keywords=P2P;streaming;movies;tv;series;shows;
Keywords[fr]=P2P;streaming;films;séries;télévision;tv;

[Desktop Action ForceClose]
Name=Force close
Name[fr]=Forcer la fermeture
Exec=killall nw
OnlyShowIn=Unity;

[Desktop Action ReportIssue]
Name=Report Issue
Name[fr]=Rapporter un problème
Exec=sh -c \"popcorn-time --issue\"
OnlyShowIn=Unity;

[Desktop Action FlushDB]
Name=Flush databases
Name[fr]=Vider les bases de données
Exec=sh -c \"killall nw ; rm -rf $HOME/.config/Popcorn-Time ; /usr/bin/popcorn-time\"
OnlyShowIn=Unity;

[Desktop Action FixNode]
Name=Fix Node-Webkit
Name[fr]=Réparer Node-Webkit
Exec=sh -c \"rm -rf $HOME/.config/node-webkit ; killall nw ; /usr/bin/popcorn-time\"
OnlyShowIn=Unity;

[Desktop Action BuildUpdate]
Name=Build latest version
Name[fr]=Construire la dernière version
Exec=sh -c 'killall nw ; xterm -fa monaco -fs 13 -bg black -fg white -title \"Build latest Popcorn Time\" -e \"popcorn-time --build\" ; /usr/bin/popcorn-time'
OnlyShowIn=Unity;" | sudo tee /usr/share/applications/popcorn-time.desktop &> /dev/null
sudo chmod +x /usr/share/applications/popcorn-time.desktop
echo -e "    «/usr/share/applications/popcorn-time.desktop»\n"

echo "- Creating uninstall script..."
echo "#!/bin/bash
#uninstallation script for Popcorn-Time

#clean directory
sudo rm -rf $installdir/Popcorn-Time

#clean config
sudo rm -rf $HOME/.config/Popcorn-Time

#clean launchers
sudo rm -rf /usr/bin/popcorn-time
sudo rm -rf /usr/share/applications/popcorn-time.desktop
" | sudo tee $installdir/Popcorn-Time/uninstall.sh &> /dev/null
sudo chmod +x $installdir/Popcorn-Time/uninstall.sh
echo -e "    «$installdir/Popcorn-Time/uninstall.sh»\n" 
}

func_end() {
if [ "$buildcommand" == "linux$arch" ] ; then
 if [ "$1" == "-update" ] ; then
	func_clean -building
	sudo rm -rf $0
 else
  read -p "Do you wish to remove all the building files [y/n] ? "
  [ "$REPLY" == "y" ] && func_clean -building
 fi
fi

if [ "$nodeppa" == "0" ] ; then
	read -p "Do you wish to uninstall the packages installed for this build, they will be needed in case of new build [y/n] ? "
	[ "$REPLY" == "y" ] && func_clean -package
fi 
}

#SCRIPT#
func_root
func_apt

clear

echo "
Popcorn-Time $version for Ubuntu-Linux
=====================================
Popcorn Time streams movies from Torrents.
Downloading copyrighted material may be illegal in your country.
!!! Use at your own risk !!!
"

sudo test

case $1 in
	-update)
		option="-update"
		;;
	*)
		[ -n "$1" ] && echo -e "\nUnauthorized option '$1' will be ignored."
		;;
esac

func_ptexists $option
func_dependencies
func_build $option
func_install $option
func_end $option

echo "=================================================
Popcorn-Time is now installed !

Type «popcorn-time --help» for more information."
exit 0

#TODO:copy builds to home and always delete popcorn-app and log.
